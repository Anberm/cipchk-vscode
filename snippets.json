{
  "as_attr_stringTemplateOutlet": {
    "prefix": "as-attr-stringTemplateOutlet",
    "body": "<ng-container *stringTemplateOutlet=\"${1:title}\">{{$1}}</ng-container>",
    "description": "字符串模式占位符"
  },
  "as_less_media-mobile-lg": {
    "prefix": "as-less-media-mobile-lg",
    "body": "@media (max-width: @screen-lg-max) {\n  $0\n}",
    "description": "`<992px` 屏幕"
  },
  "as_less_media-mobile-md": {
    "prefix": "as-less-media-mobile-md",
    "body": "@media (max-width: @screen-md-max) {\n  $0\n}",
    "description": "`<768px` 屏幕"
  },
  "as_less_media-mobile-sm": {
    "prefix": "as-less-media-mobile-sm",
    "body": "@media (max-width: @screen-md-max) {\n  $0\n}",
    "description": "`<576px` 屏幕"
  },
  "as_less_media-mobile-xs": {
    "prefix": "as-less-media-mobile-xs",
    "body": "@media (max-width: @screen-xs-max) {\n  $0\n}",
    "description": "`<480px` 屏幕"
  },
  "as_less_media-mobile": {
    "prefix": "as-less-media-mobile",
    "body": "@media (max-width: @mobile-max) {\n  $0\n}",
    "description": "`@mobile-max` 大小"
  },
  "as_less_media-pc-lg": {
    "prefix": "as-less-media-pc-lg",
    "body": "@media (min-width: @screen-lg-min) {\n  $0\n}",
    "description": "`>992px` 屏幕"
  },
  "as_less_media-pc-md": {
    "prefix": "as-less-media-pc-md",
    "body": "@media (min-width: @screen-md-min) {\n  $0\n}",
    "description": "`>768px` 屏幕"
  },
  "as_less_media-pc-sm": {
    "prefix": "as-less-media-pc-sm",
    "body": "@media (min-width: @screen-md-min) {\n  $0\n}",
    "description": "`>576px` 屏幕"
  },
  "as_less_media-pc-xs": {
    "prefix": "as-less-media-pc-xs",
    "body": "@media (min-width: @screen-xs-min) {\n  $0\n}",
    "description": "`>480px` 屏幕"
  },
  "as_less_media-pc": {
    "prefix": "as-less-media-pc",
    "body": "@media (min-width: @mobile-min) {\n  $0\n}",
    "description": "`@mobile-min` 大小"
  },
  "as_lint_disabled": {
    "prefix": "as-lint-disabled",
    "body": "// tslint:disable:${1|no-any,no-string-literal,no-invalid-this,no-shadowed-variable|}"
  },
  "as_test_describe": {
    "prefix": "as-test-describe",
    "body": "describe('${1|default,#properies|}', () => {\n  $0\n});"
  },
  "as_test_it-done": {
    "prefix": "as-test-it-done",
    "body": "it('${1:should be working}', (done: () => void) => {\n  $0\n});"
  },
  "as_test_it-fakeAsync": {
    "prefix": "as-test-it-fakeAsync",
    "body": "it('${1:should be working}', fakeAsync(() => {\n  $0\n}));"
  },
  "as_test_it": {
    "prefix": "as-test-it",
    "body": "it('${1:should be working}', () => {\n  $0\n});"
  },
  "as_test_new": {
    "prefix": "as-test-new",
    "body": "import { Component, DebugElement, ViewChild } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\n\ndescribe('${1}', () => {\n  let fixture: ComponentFixture<TestComponent>;\n  let dl: DebugElement;\n  let context: TestComponent;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [${2}],\n      declarations: [TestComponent],\n    });\n    fixture = TestBed.createComponent(TestComponent);\n    dl = fixture.debugElement;\n    context = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  $0\n});\n\n@Component({\n  template: `\n  <${3} #comp>\n  </${3}>\n  `,\n})\nclass TestComponent {\n  @ViewChild('comp') comp: ${4};\n}",
    "description": "新测试用例"
  },
  "as_ts_@input-@output": {
    "prefix": "as-ts-@input-@output",
    "body": "@Input() ${1|type,collapsed|} = ${2|true,false,0,''|};\n@Output() readonly ${1}Change = new EventEmitter<${3|boolean,number,string,void,any|}>();\n$0"
  },
  "as_ts_@input-boolean": {
    "prefix": "as-ts-@input-boolean",
    "body": "@Input() @InputBoolean() ${1|close,open,disabled,enabled,loading,collapsed|} = $2;\n$0"
  },
  "as_ts_@input-number": {
    "prefix": "as-ts-@input-number",
    "body": "@Input() @InputNumber() ${1|height,width,size|} = $2;\n$0"
  },
  "as_ts_@input-string-template": {
    "prefix": "as-ts-@input-string-template",
    "body": "@Input() ${1|title,subTitle,action,extra|}: string | TemplateRef<void>;\n$0"
  },
  "as_ts_@input": {
    "prefix": "as-ts-@input",
    "body": "@Input() $1 = $2;\n$0"
  },
  "as_ts_@output": {
    "prefix": "as-ts-@output",
    "body": "@Output() readonly ${1|close,open,typeChange,collapsedChange|} = new EventEmitter<$2>();\n$0"
  },
  "as_ts_region": {
    "prefix": "as-ts-region",
    "body": "// #region ${1|fileds,privates,angular|}\n\n$0\n\n// #endregion"
  }
}